1c1
< // CDS Connect Commons for FHIRv102
---
> // CDS Connect Commons for FHIRv400
8c8
< library CDS_Connect_Commons_for_FHIRv102 version '1.3.2'
---
> library CDS_Connect_Commons_for_FHIRv400 version '1.3.2'
10c10
< using FHIR version '1.0.2'
---
> using FHIR version '4.0.0'
13c13,23
< include FHIRHelpers version '1.0.2' called FHIRHelpers
---
> include FHIRHelpers version '4.0.0' called FHIRHelpers
> 
> codesystem "Condition Verification Status Codes": 'http://terminology.hl7.org/CodeSystem/condition-ver-status'
> codesystem "Condition Clinical Status Codes": 'http://terminology.hl7.org/CodeSystem/condition-clinical'
> codesystem "AllergyIntolerance Verification Status Codes": 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification'
> 
> code "Condition verificationStatus confirmed code": 'confirmed' from "Condition Verification Status Codes" display 'Confirmed'
> code "Condition clinicalStatus active code": 'active' from "Condition Clinical Status Codes" display 'Active'
> code "Condition clinicalStatus recurrence code": 'recurrence' from "Condition Clinical Status Codes" display 'Recurrence'
> code "Condition clinicalStatus relapse code": 'relapse' from "Condition Clinical Status Codes" display 'Relapse'
> code "AllergyIntolerance verificationStatus confirmed code": 'confirmed' from "AllergyIntolerance Verification Status Codes" display 'Confirmed'
80c90
<  * Observations that are complete and verified. In FHIR DSTU2, there are two statuses that indicate this state: 'final'
---
>  * Observations that are complete and verified. In FHIR R4, there are two statuses that indicate this state: 'final'
82c92
<  * @see http://hl7.org/fhir/DSTU2/valueset-observation-status.html
---
>  * @see https://www.hl7.org/fhir/valueset-observation-status.html
96c106
<   ObsList O where O.valueQuantity.unit.value = Unit or O.valueQuantity.code.value = Unit
---
>   ObsList O where O.value.unit.value = Unit or O.value.code.value = Unit
109,111c119,121
<     where O.effectiveDateTime.value in LookBackInterval
<       or NullSafeToInterval(O.effectivePeriod) overlaps LookBackInterval
<       or O.issued in LookBackInterval
---
>     where O.effective.value in LookBackInterval
>       or NullSafeToInterval(O.effective) overlaps LookBackInterval
>       or O.issued.value in LookBackInterval
122c132
<   Last(ObsList O sort by Coalesce(effectiveDateTime.value, effectivePeriod."end".value, effectivePeriod."start".value, issued.value))
---
>   Last(ObsList O sort by Coalesce(effective.value, effective."end".value, effective."start".value, issued.value))
130c140
<   NullSafeToQuantity(Obs.valueQuantity)
---
>   NullSafeToQuantity(Obs.value)
138c148
<   NullSafeToConcept(Obs.valueCodeableConcept)
---
>   NullSafeToConcept(Obs.value)
147c157
<   Coalesce(Obs.effectiveDateTime.value, Obs.effectivePeriod."end".value, Obs.effectivePeriod."start".value, Obs.issued.value)
---
>   Coalesce(Obs.effective.value, Obs.effective."end".value, Obs.effective."start".value, Obs.issued.value)
157c167
<   Max(ObsList O return NullSafeToQuantity(O.valueQuantity))
---
>   Max(ObsList O return NullSafeToQuantity(O.value))
172,173c182,183
<  * Conditions that are confirmed. In FHIR DSTU2, this is reflected by verificationStatus: 'confirmed'.
<  * @see http://hl7.org/fhir/DSTU2/valueset-condition-ver-status.html
---
>  * Conditions that are confirmed. In FHIR R4, this is reflected by verificationStatus: 'confirmed'.
>  * @see https://www.hl7.org/fhir/valueset-condition-ver-status.html
178c188
<   CondList C where C.verificationStatus.value = 'confirmed'
---
>   CondList C where C.verificationStatus.coding ~ "Condition verificationStatus confirmed code"
181c191
<  * Conditions that are active. In FHIR DSTU2, this is reflected by clinicalStatus: 'active' and the absence of any
---
>  * Conditions that are active. In FHIR R4, this is reflected by clinicalStatus: 'active' and the absence of any
184c194
<  * @see http://hl7.org/fhir/DSTU2/valueset-condition-clinical.html
---
>  * @see https://www.hl7.org/fhir/valueset-condition-clinical.html
190,196c200,201
<     where C.clinicalStatus.value = 'active'
<       and C.abatementDateTime is null
<       and C.abatementQuantity is null
<       and C.abatementBoolean.value is not true
<       and C.abatementPeriod is null
<       and C.abatementRange is null
<       and C.abatementString is null
---
>     where C.clinicalStatus.coding ~ "Condition clinicalStatus active code"
>       and C.abatement is null
199c204
<  * Conditions that are active or recurring. In FHIR DSTU2, this is reflected by clinicalStatus: 'active' or 'relapse'.
---
>  * Conditions that are active or recurring. In FHIR R4, this is reflected by clinicalStatus: 'active', 'recurrence', or 'relapse'.
202c207
<  * @see http://hl7.org/fhir/DSTU2/valueset-condition-clinical.html
---
>  * @see https://www.hl7.org/fhir/valueset-condition-clinical.html
207c212,214
<   CondList C where C.clinicalStatus.value in {'active', 'relapse'}
---
>   CondList C where C.clinicalStatus.coding ~ "Condition clinicalStatus active code"
>     or C.clinicalStatus.coding ~ "Condition clinicalStatus recurrence code"
>     or C.clinicalStatus.coding ~ "Condition clinicalStatus relapse code"
220,222c227,229
<     where C.onsetDateTime.value in LookBackInterval
<       or NullSafeToInterval(C.onsetPeriod) overlaps LookBackInterval
<       or C.dateRecorded.value in LookBackInterval
---
>     where C.onset.value in LookBackInterval
>       or NullSafeToInterval(C.onset) overlaps LookBackInterval
>       or C.recordedDate.value in LookBackInterval
237,239c244,246
<  * Procedures that are completed. In FHIR DSTU2, this is reflected by status: 'completed'.  In addition, the
<  * notPerformed flag must be checked to ensure it is not 'true'.
<  * @see http://hl7.org/fhir/DSTU2/valueset-procedure-status.html
---
>  * Procedures that are completed. In FHIR R4, this is reflected by status: 'completed'.  In addition, the
>  * notDone flag must be checked to ensure it is not 'true'.
>  * @see https://www.hl7.org/fhir/valueset-event-status.html
246d252
<       and P.notPerformed.value is not true
249,251c255,257
<  * Procedures that are in progress. In FHIR DSTU2, this is reflected by status: 'in-progress'.  In addition, the
<  * notPerformed flag must be checked to ensure it is not 'true'.
<  * @see http://hl7.org/fhir/DSTU2/valueset-procedure-status.html
---
>  * Procedures that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.  In addition, the
>  * notDone flag must be checked to ensure it is not 'true'.
>  * @see https://www.hl7.org/fhir/valueset-event-status.html
258d263
<       and P.notPerformed.value is not true
261,263c266,268
<  * Procedures that actually happened or are happening. In FHIR DSTU2, there are a few properties that negate the
<  * procedure, most notably when status is 'entered-in-error' or notPerformed is true.
<  * @see http://hl7.org/fhir/DSTU2/valueset-procedure-status.html
---
>  * Procedures that actually happened or are happening. In FHIR R4, there are a few properties that negate the
>  * procedure, most notably when status is 'entered-in-error' or notDone is true.
>  * @see https://www.hl7.org/fhir/valueset-event-status.html
270d274
<       and P.notPerformed.value is not true
284,308c288,289
<     where P.performedDateTime.value in LookBackInterval
<       or NullSafeToInterval(P.performedPeriod) overlaps LookBackInterval
< 
< // ---------------------------------------------- PROCEDUREREQUESTS ----------------------------------------------------
< 
<  /**
<   * Filters ProcedureRequests by a concept rather than by a ValueSet.  In CQL 1.3, this will be built into the retrieve,
<   * but for now, we must use a query where clause.
<   * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
<   * @returns {List<ProcedureRequest>} a list of ProcedureRequests matching the concept, or null if null was passed in
<   */
<  define function ProcedureRequestsByConcept(Koncept System.Concept):
<    [ProcedureRequest] P where NullSafeToConcept(P.code) ~ Koncept
< 
< /**
<  * ProcedureRequests that are accepted, in progress, or completed. In FHIR DSTU2, this is reflected by the corresponding
<  * status status values.
<  * @see http://hl7.org/fhir/DSTU2/valueset-procedure-request-status.html
<  * @param ProcReqList - a list of ProcedureRequests
<  * @returns {List<ProcedureRequest>} a list of accepted, in-progress, or completed ProcedureRequests,
<  * or null if null was passed in
<  */
< define function ProcedureRequestAcceptedOrInProgressOrCompleted(ProcReqList List<ProcedureRequest>):
<   ProcReqList P
<     where P.status.value in List{'accepted', 'in-progress', 'completed'}
---
>     where P.performed.value in LookBackInterval
>       or NullSafeToInterval(P.performed) overlaps LookBackInterval
310,358c291,364
< /**
<  * ProcedureRequests ordered in the specified "look back" period.  For example, PCIs ordered in the
<  * past 2 weeks.
<  * TODO: Rename to LookBack once the execution engine supports overloaded functions.
<  * @param ProcReqList - a list of ProcedureRequests
<  * @param LookBack - the lookback period for when the procedure was ordered
<  * @returns {List<ProcedureRequest>} a list of ProcedureRequests ordered in the look back period, or null if null
<  * was passed in
<  */
< define function ProcedureRequestLookBack(ProcReqList List<ProcedureRequest>, LookBack System.Quantity):
<   ProcReqList P
<     where P.orderedOn.value in Interval[Now() - LookBack, Now()]
< 
< // ----------------------------------------------- REFERRALREQUESTS ----------------------------------------------------
< 
<  /**
<   * Filters ReferralRequests by a concept rather than by a ValueSet.  In CQL 1.3, this will be built into the retrieve,
<   * but for now, we must use a query where clause.
<   * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
<   * @returns {List<ReferralRequest>} a list of ReferralRequests matching the concept, or null if null was passed in
<   */
<  define function ReferralRequestsByServiceRequestedConcept(Koncept System.Concept):
<    [ReferralRequest] R
<    where exists((R.serviceRequested) SRC where NullSafeToConcept(SRC) ~ Koncept)
< 
< /**
<  * ReferralRequests that are accepted, active, or completed. In FHIR DSTU2, this is reflected by the corresponding
<  * status status values.
<  * @see http://hl7.org/fhir/DSTU2/valueset-referralstatus.html
<  * @param ReferralList - a list of ReferralRequests
<  * @returns {List<ReferralRequest>} a list of accepted, active, or completed ReferralRequests,
<  * or null if null was passed in
<  */
< define function ReferralRequestAcceptedOrActiveOrCompleted(ReferralList List<ReferralRequest>):
<   ReferralList R
<     where R.status.value in List{'accepted', 'active', 'completed'}
< 
< /**
<  * ReferralRequests requested in the specified "look back" period.  For example, pace make insertions referrals sent
<  * in the past 2 weeks.
<  * TODO: Rename to LookBack once the execution engine supports overloaded functions.
<  * @param ReferralList - a list of ReferralRequests
<  * @param LookBack - the lookback period for when the referral was sent
<  * @returns {List<ReferralRequest>} a list of ReferralRequests sent in the look back period, or null if null
<  * was passed in
<  */
< define function ReferralRequestLookBack(ReferralList List<ReferralRequest>, LookBack System.Quantity):
<   ReferralList R
<     where R.dateSent.value in Interval[Now() - LookBack, Now()]
---
> // Note: ProcedureRequest and ReferralRequest resources have been replaced in FHIR R4 with the ServiceRequest resource.
> // TODO: When needed, come back and ServiceRequest helper functions.
> // // ---------------------------------------------- PROCEDUREREQUESTS ----------------------------------------------------
> 
> //  /**
> //   * Filters ProcedureRequests by a concept rather than by a ValueSet.  In CQL 1.3, this will be built into the retrieve,
> //   * but for now, we must use a query where clause.
> //   * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
> //   * @returns {List<ProcedureRequest>} a list of ProcedureRequests matching the concept, or null if null was passed in
> //   */
> //  define function ProcedureRequestsByConcept(Koncept System.Concept):
> //    [ProcedureRequest] P where NullSafeToConcept(P.code) ~ Koncept
> 
> // /**
> //  * ProcedureRequests that are accepted, in progress, or completed. In FHIR DSTU2, this is reflected by the corresponding
> //  * status status values.
> //  * @see http://hl7.org/fhir/DSTU2/valueset-procedure-request-status.html
> //  * @param ProcReqList - a list of ProcedureRequests
> //  * @returns {List<ProcedureRequest>} a list of accepted, in-progress, or completed ProcedureRequests,
> //  * or null if null was passed in
> //  */
> // define function ProcedureRequestAcceptedOrInProgressOrCompleted(ProcReqList List<ProcedureRequest>):
> //   ProcReqList P
> //     where P.status.value in List{'accepted', 'in-progress', 'completed'}
> 
> // /**
> //  * ProcedureRequests ordered in the specified "look back" period.  For example, PCIs ordered in the
> //  * past 2 weeks.
> //  * TODO: Rename to LookBack once the execution engine supports overloaded functions.
> //  * @param ProcReqList - a list of ProcedureRequests
> //  * @param LookBack - the lookback period for when the procedure was ordered
> //  * @returns {List<ProcedureRequest>} a list of ProcedureRequests ordered in the look back period, or null if null
> //  * was passed in
> //  */
> // define function ProcedureRequestLookBack(ProcReqList List<ProcedureRequest>, LookBack System.Quantity):
> //   ProcReqList P
> //     where P.authoredOn.value in Interval[Now() - LookBack, Now()]
> 
> // // ----------------------------------------------- REFERRALREQUESTS ----------------------------------------------------
> 
> //  /**
> //   * Filters ReferralRequests by a concept rather than by a ValueSet.  In CQL 1.3, this will be built into the retrieve,
> //   * but for now, we must use a query where clause.
> //   * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
> //   * @returns {List<ReferralRequest>} a list of ReferralRequests matching the concept, or null if null was passed in
> //   */
> //  define function ReferralRequestsByServiceRequestedConcept(Koncept System.Concept):
> //    [ReferralRequest] R
> //    where exists((R.serviceRequested) SRC where NullSafeToConcept(SRC) ~ Koncept)
> 
> // /**
> //  * ReferralRequests that are accepted, active, or completed. In FHIR DSTU2, this is reflected by the corresponding
> //  * status status values.
> //  * @see http://hl7.org/fhir/DSTU2/valueset-referralstatus.html
> //  * @param ReferralList - a list of ReferralRequests
> //  * @returns {List<ReferralRequest>} a list of accepted, active, or completed ReferralRequests,
> //  * or null if null was passed in
> //  */
> // define function ReferralRequestAcceptedOrActiveOrCompleted(ReferralList List<ReferralRequest>):
> //   ReferralList R
> //     where R.status.value in List{'accepted', 'active', 'completed'}
> 
> // /**
> //  * ReferralRequests requested in the specified "look back" period.  For example, pace make insertions referrals sent
> //  * in the past 2 weeks.
> //  * TODO: Rename to LookBack once the execution engine supports overloaded functions.
> //  * @param ReferralList - a list of ReferralRequests
> //  * @param LookBack - the lookback period for when the referral was sent
> //  * @returns {List<ReferralRequest>} a list of ReferralRequests sent in the look back period, or null if null
> //  * was passed in
> //  */
> // define function ReferralRequestLookBack(ReferralList List<ReferralRequest>, LookBack System.Quantity):
> //   ReferralList R
> //     where R.authoredOn.value in Interval[Now() - LookBack, Now()]
369c375
<   [MedicationStatement] M where NullSafeToConcept(M.medicationCodeableConcept) ~ Koncept
---
>   [MedicationStatement] M where NullSafeToConcept(M.medication) ~ Koncept
372c378
<  * Filters MedicationOrders by a concept rather than by a ValueSet.  In CQL 1.3, this will be built into the retrieve,
---
>  * Filters MedicationRequests by a concept rather than by a ValueSet.  In CQL 1.3, this will be built into the retrieve,
375c381
<  * @returns {List<MedicationOrder>} a list of MedicationOrders matching the concept, or null if null was passed in
---
>  * @returns {List<MedicationRequest>} a list of MedicationRequests matching the concept, or null if null was passed in
377,378c383,384
< define function MedicationOrdersByConcept(Koncept System.Concept):
<   [MedicationOrder] M where NullSafeToConcept(M.medicationCodeableConcept) ~ Koncept
---
> define function MedicationRequestsByConcept(Koncept System.Concept):
>   [MedicationRequest] M where NullSafeToConcept(M.medication) ~ Koncept
382c388
<  * medications that a patient has self-reported to be taking.  In FHIR DSTU2, this is reflected by MedicationStatement
---
>  * medications that a patient has self-reported to be taking.  In FHIR R4, this is reflected by MedicationStatement
385c391
<  * @see http://hl7.org/fhir/DSTU2/valueset-medication-statement-status.html
---
>  * @see https://www.hl7.org/fhir/valueset-medication-statement-status.html
391c397
<     let EffectivePeriod: NullSafeToInterval(M.effectivePeriod)
---
>     let EffectivePeriod: NullSafeToInterval(M.effective)
393d398
<       and M.wasNotTaken.value is not true
398c403
<  * For example, medications that a patient has self-reported to be taking.  In FHIR DSTU2, this is reflected by
---
>  * For example, medications that a patient has self-reported to be taking.  In FHIR R4, this is reflected by
401c406
<  * @see http://hl7.org/fhir/DSTU2/valueset-medication-statement-status.html
---
>  * @see https://www.hl7.org/fhir/valueset-medication-statement-status.html
410d414
<       and M.wasNotTaken.value is not true
413c417
< * Medications that are active, according to a prescription.  In FHIR DSTU2, this is reflected by MedicationOrder
---
> * Medications that are active, according to a prescription.  In FHIR R4, this is reflected by MedicationRequest
416,421c420,422
< * TODO: Revisit based on outcome of FHIR chat.
< * TODO: Rename to Active once the execution engine supports overloaded functions.
< * @see https://chat.fhir.org/#narrow/stream/implementers/topic/Meaning.20of.20.22active.22.20and.20.22completed.22.20in.20MedicationRequest
< * @see http://hl7.org/fhir/DSTU2/valueset-medication-order-status.html
< * @param MedList - a list of MedicationOrders
< * @returns {List<MedicationOrder>} a list of active medication orders, or null if null was passed in
---
> * @see https://www.hl7.org/fhir/valueset-medicationrequest-status.html
> * @param MedList - a list of MedicationRequests
> * @returns {List<MedicationRequest>} a list of active medication orders, or null if null was passed in
423c424
< define function ActiveMedicationOrder(MedList List<MedicationOrder>):
---
> define function ActiveMedicationRequest(MedList List<MedicationRequest>):
426d426
<       and M.dateEnded.value is null
429c429
< * Medications that are active or completed, according to a prescription.  In FHIR DSTU2, this is reflected by MedicationOrder
---
> * Medications that are active or completed, according to a prescription.  In FHIR R4, this is reflected by MedicationRequest
431,433c431,433
< * @see http://hl7.org/fhir/DSTU2/valueset-medication-order-status.html
< * @param MedList - a list of MedicationOrders
< * @returns {List<MedicationOrder>} a list of active medication orders, or null if null was passed in
---
> * @see https://www.hl7.org/fhir/valueset-medicationrequest-status.html
> * @param MedList - a list of MedicationRequests
> * @returns {List<MedicationRequest>} a list of active medication orders, or null if null was passed in
435c435
< define function ActiveOrCompletedMedicationOrder(MedList List<MedicationOrder>):
---
> define function ActiveOrCompletedMedicationRequest(MedList List<MedicationRequest>):
441,445c441,445
< * Medications that are active, completed, or stopped, according to a prescription.  In FHIR DSTU2, this is reflected by
< * MedicationOrder with status 'active', 'completed', or 'stopped'
< * @see http://hl7.org/fhir/DSTU2/valueset-medication-order-status.html
< * @param MedList - a list of MedicationOrders
< * @returns {List<MedicationOrder>} a list of active medication orders, or null if null was passed in
---
> * Medications that are active, completed, or stopped, according to a prescription.  In FHIR R4, this is reflected by
> * MedicationRequest with status 'active', 'completed', or 'stopped'
> * @see https://www.hl7.org/fhir/valueset-medicationrequest-status.html
> * @param MedList - a list of MedicationRequests
> * @returns {List<MedicationRequest>} a list of active medication orders, or null if null was passed in
447c447
< define function ActiveCompletedOrStoppedMedicationOrder(MedList List<MedicationOrder>):
---
> define function ActiveCompletedOrStoppedMedicationRequest(MedList List<MedicationRequest>):
465,466c465,466
<     where M.effectiveDateTime.value in LookBackInterval
<       or NullSafeToInterval(M.effectivePeriod) overlaps LookBackInterval
---
>     where M.effective.value in LookBackInterval
>       or NullSafeToInterval(M.effective) overlaps LookBackInterval
469c469
<  * MedicationOrders with a written date in the specified "look back" period.  For example, opioid orders in the last
---
>  * MedicationRequests with a written date in the specified "look back" period.  For example, opioid orders in the last
472,474c472,474
<  * @param OrderList - a list of MedicationOrders
<  * @param LookBack - a duration Quantity indicating how far back to look for MedicationOrders
<  * @returns {List<MedicationOrder>} a list of MedicationOrders with written date in the specified lookback period,
---
>  * @param OrderList - a list of MedicationRequests
>  * @param LookBack - a duration Quantity indicating how far back to look for MedicationRequests
>  * @returns {List<MedicationRequest>} a list of MedicationRequests with written date in the specified lookback period,
477,478c477,478
< define function MedicationOrderLookBack(MedList List<MedicationOrder>, LookBack System.Quantity):
<   MedList M where M.dateWritten.value in Interval[Now() - LookBack, Now()]
---
> define function MedicationRequestLookBack(MedList List<MedicationRequest>, LookBack System.Quantity):
>   MedList M where M.authoredOn.value in Interval[Now() - LookBack, Now()]
492,493c492,493
<  * Encounters that are in progress. In FHIR DSTU2, this is reflected by status: 'in-progress'.
<  * @see http://hl7.org/fhir/DSTU2/valueset-encounter-state.html
---
>  * Encounters that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.
>  * @see https://www.hl7.org/fhir/valueset-encounter-status.html
502c502
<  * Encounters that have not been cancelled. In FHIR DSTU2, this is reflected by  andy status other 
---
>  * Encounters that have not been cancelled. In FHIR R4, this is reflected by  andy status other 
504c504
<  * @see http://hl7.org/fhir/DSTU2/valueset-encounter-state.html
---
>  * @see https://www.hl7.org/fhir/valueset-encounter-status.html
534c534
<   [AllergyIntolerance] A where NullSafeToConcept(A.substance) ~ Koncept
---
>   [AllergyIntolerance] A where NullSafeToConcept(A.code) ~ Koncept
537,539c537,539
< * AllergyIntolerances that are active or confirmed.  In FHIR DSTU2, this is reflected by AllergyIntolerance
< * with status 'active' or 'confirmed'
< * @see http://hl7.org/fhir/DSTU2/valueset-allergy-intolerance-status.html
---
> * AllergyIntolerances that are active or confirmed.  In FHIR R4, this is reflected by AllergyIntolerance
> * with verificationStatus 'active' or 'confirmed'
> * @see https://www.hl7.org/fhir/valueset-allergyintolerance-verification.html
543c543
< define function ActiveOrConfirmedAllergyIntolerance(AllergyIntolList List<AllergyIntolerance>):
---
> define function ConfirmedAllergyIntolerance(AllergyIntolList List<AllergyIntolerance>):
545,546c545
<     where A.status.value = 'active'
<       or A.status.value = 'confirmed'
---
>     where A.verificationStatus.coding ~ "AllergyIntolerance verificationStatus confirmed code"
561,563c560,562
<     where G.startDate.value in LookBackInterval
<       or G.targetDate.value in LookBackInterval
<       or (G.startDate.value + NullSafeToQuantity(G.targetQuantity)) in LookBackInterval
---
>     where G.start.value in LookBackInterval
>       or G.target.dueD in LookBackInterval
>       or G.start.value in LookBackInterval
